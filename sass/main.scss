/* Use the 7:1 pattern of directories for a manageable codebase */

/* The order that you import partials into the main file is the order that Sass will compile all of its contents... as a rule, you want to import in the following order: 1. Utils (variables, functions, mixins, then placeholders), 2. Vendor sheets, 3. Base, 4. Components, 5. Layout, 6. Pages, and 7. Themes */
@import "./utils/variables";
@import "./utils/functions";
@import "./utils/mixins";
@import "./utils/extensions";

@import "./base/base";
@import "./base/typography";

@import "./components/buttons";

@import "./layouts/header";
@import "./layouts/nav";
@import "./layouts/container";
@import "./layouts/form";

@import "./pages/rest1.scss";
@import "./pages/rest2";
@import "./pages/rest3";
@import "./pages/rest4";

.like-container {
    height:100px;
    margin:0 auto;
    position: relative;
  }
  
.heart-icon {
    cursor:pointer;
    padding:10px 12px 8px;
    background:#fff;
    border-radius:50%;
    display:inline-block;
    margin:0 0 15px;
    color:#aaa;
    transition:.2s;
  }
  
.heart-icon:hover {
    color:#666;
  }
  
.heart-icon:before {
    font-family:fontawesome;
    content:'\f004';
    font-style:normal;
  }
  
 
  
.heart-icon.press {
    animation: size .4s;
    color:#e23b3b;
  }
  
 
  
  @keyframes fade {
    0% {color:#transparent;}
    50% {color:#e23b3b;}
    100% {color:#transparent;}
  }
  
  @keyframes size {
    0% {padding:10px 12px 8px;}
    50% {padding:14px 16px 12px;  
      margin-top:-4px;}
    100% {padding:10px 12px 8px;}
  }


  /*css for the spinning loader */

/* 1. store variables, functions, mixins, and %placeholders for extensions (if you use them) */

1. Utils/
/* @import "./utils/variables" ...when written in this main.scss file, this will track to the utilities folder within the same directory*/


/* 2. a directory for third-party library style sheets such as Bootstrap or jquery UI */

2. Vendors/


/* 3. files that define the foundation of your site, such as the typography and norms you want applied site-wide, like box-sizing */

3. Base/


/*  4. store BEM blocks that are more self-contained, such as buttons */

4. Components/


/*  5. store BEM blocks which contain things that can be reused, such as a form or header for large layouts */

5. Layouts/


/* 6. contains blocks of code/rules specific to a single page and won't be reused elsewhere */

6. Pages/


/*  7. store thematic code, such as custom styling for Christmas or Halloween */

7. Themes/


